#!/usr/bin/env perl

# * GPL3
#
# Copyright (C) 2017 Samuel Barreto <samuel.barreto8@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#
# * Synopsis
#
# This script will convert from and to any file format know to BioPerl
# SeqIO or BioPerl AlignIO. It acts as a POSIX filter by parsing STDIN
# and writing to STDOUT.

use v5.22;
use strict;
use Bio::SeqIO;
use Bio::AlignIO;
use Getopt::Long qw(GetOptions);
use Pod::Usage qw(pod2usage);


# * Command line options


my $from      = "" ;
my $to        = "" ;
my $man       = 0  ;
my $help      = 0  ;
my $force_seq = 0  ;


GetOptions('in=s' => \$from,
           'out=s'   => \$to,
           'seq'    => \$force_seq,
           'help|?' => \$help,
           'man'    => \$man,
          ) or pod2usage(2);

pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;

# check that stdin exists or arguments are provided
pod2usage(0) if ((@ARGV == 0) && (-t STDIN));


# * IO


if (check_aln_format($from, $to)) {
  my $seqin  = Bio::AlignIO->new('-format' => $from, '-fh' => \*STDIN);
  my $seqout = Bio::AlignIO->new('-format' => $to, '-fh' => \*STDOUT);

  while ( my $seq = $seqin->next_aln) {
    $seqout->write_aln($seq);
  }
} elsif (check_seq_format($from, $to)) {
  my $seqin  = Bio::SeqIO->new('-format' => $from, '-fh' => \*STDIN);
  my $seqout = Bio::SeqIO->new('-format' => $to,   '-fh' => \*STDOUT);

  while ( my $seq = $seqin->next_seq) {
    $seqout->write_seq($seq);
  }
} else {
  pod2usage(-verbose => 1,
           -message  => "ERROR: Check that file formats are valid.\n");
}


# * Helper functions
#
# Check that element $elem is in list @list.

sub in {
  my ($elem, @list) = @_;
  (grep {$_ eq $elem } @list) ? return 1 : return 0;
}

# Check that aln format IO are known to BioPerl::AlignIO.

sub check_aln_format {
  my ($from, $to) = @_;

  my @align_input =
  ( "bl2seq", "clustalw", "emboss", "fasta", "maf", "mase",
    "mega", "meme", "metafasta", "msf", "nexus", "pfam",
    "phylip", "po", "prodom", "psi", "selex", "stockholm",
    "xmfa", "arp" );

  my @align_output =
    ( "fasta", "mase", "selex", "clustalw", "msf", "phylip", "po",
      "stockholm", "XMFA", "metafasta" );

  in($from, @align_input) && in($to, @align_output) ?
    return 1 :
    return 0 ;
}

# Check that seq format IO are known to BioPerl::SeqIO.

sub check_seq_format {
  my ($from, $to) = @_;

  my @format_input =
    ( "abi", "ace", "agave", "alf", "asciitree", "bsml", "bsml_sax",
      "chadoxml", "chaos", "chaosxml", "ctf", "embl", "entrezgene",
      "excel", "exp", "fasta", "fastq", "flybase_chadoxml", "game", "gcg",
      "genbank", "interpro", "kegg", "largefasta", "lasergene",
      "locuslink", "metafasta", "phd", "pir", "pln", "qual", "raw", "scf",
      "seqxml", "strider", "swiss", "tab", "table", "tigr", "tigrxml",
      "tinyseq", "ztr" );

  in($from, @format_input) && in($to, @format_input) ?
    return 1 :
    return 0;
}

__END__

=head1 NAME

from-to - Convert a file from format to format

=head1 SYNOPSIS

  from-to -i <from> -o <to> < STDIN

  Options:
    --in    -i   file format of input
    --out   -t   file format of output
    --help  -h   brief help message
    --man   -m   full documentation

=head1 OPTIONS

=over 2

=item B<--in/out>

File formats to convert from and to.
Valid formats for SeqIO are :

=over 4

abi, ace, agave, alf, asciitree, bsml, bsml_sax, chadoxml, chaos,
chaosxml, ctf, embl, entrezgene, excel, exp, fasta, fastq,
flybase_chadoxml, game, gcg, genbank, interpro, kegg, largefasta,
lasergene, locuslink, metafasta, phd, pir, pln, qual, raw, scf, seqxml,
strider, swiss, tab, table, tigr, tigrxml, tinyseq, ztr

=back

Valid formats for AlignIO input are :

=over 4

bl2seq, clustalw, emboss, fasta, maf, mase, mega, meme,
metafasta, msf, nexus, pfam, phylip, po, prodom, psi,
selex, stockholm, xmfa, arp

=back

and valid formats for AlignIO output are :

=over 4

fasta, mase, selex, clustalw, msf, phylip, po,
stockholm, xmfa, metafasta

=back

Informations are available on http://bioperl.org/howtos/SeqIO_HOWTO#item5.

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

This perl script parses STDIN as a file with format described by the
--in option, and print it to STDOUT as a file with format described by
the --out option.

=cut
