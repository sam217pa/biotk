#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'


_bold () {
    local __bold=$(tput bold)
    local __normal=$(tput sgr0)

    echo ${__bold}"$1"${__normal}
}

usage() {
    cat <<END_DOC
USAGE:

  biotk bacterial-gc-content <species-name>
  biotk clustal-to-fasta < <STDIN>
  biotk fasta-snp-pos <multi-fasta-file.fasta> <reference-name>
  biotk genbank-query [options] <query>

SYNOPSIS:

  $(_bold biotk) is a simple utility I set up to gather ad-hoc
  scripts written in Bash or Perl to do stuff I do often like computing
  GC-contents for a bacterial species, downloading sequence from
  genbank, converting Clustal output from MUSCLE to Fasta and computing
  the position of divergence in a multi-fasta file.

DESCRIPTION:

  Detailed description of each subcommand can be found with :

    $ biotk <subcommand> --help

  $(_bold bacterial-gc-content):
    Computes the mean GC content of prokaryotic species as reported in
    genomes reports on NCBI.

  $(_bold clustal-to-fasta):
    Converts an alignment in CLW format to a multi-fasta one.

  $(_bold fasta-snp-pos):
    Computes the position of divergence in a multi-fasta alignment.

  $(_bold genbank-query):
    Query and download Genbank for a given accession number.

  $(_bold fasta-n-record):
    Print the nth record in a fasta sequence.

  $(_bold fasta-linear):
    Turn a multiline fasta into a one-record-per-line fasta

  $(_bold from-to):
    Uses bio-perl to convert from a file format to another.

OPTIONS:

  --help: Display this help message

AUTHOR:

  Samuel Barreto, (2017-05-29)

END_DOC

    exit 0
}

if [ $# -eq 0 ]; then > /dev/null && usage; fi
expr "$1" : ".*--help" > /dev/null && usage

readonly LOG_FILE="/tmp/$(basename "$0").log"
info()    { echo "INFO:  $@" | tee -a "$LOG_FILE" >&2 ; }
warn()    { echo "WARN:  $@" | tee -a "$LOG_FILE" >&2 ; }
error()   { echo "ERROR: $@" | tee -a "$LOG_FILE" >&2 ; }
fatal()   { echo "FATAL: $@" | tee -a "$LOG_FILE" >&2 ; exit 1 ; }

cleanup()
{
    unset _bold
}

main ()
{
    local _srcdir=$(dirname "$(readlink -f "$0")")
    local _progname="$1"
    shift

    exec ${_srcdir}/"${_progname}" "$@"
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
    trap cleanup EXIT

    main "$@"

fi
