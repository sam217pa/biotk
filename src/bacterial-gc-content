#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

usage() {
    cat <<END_DOC
USAGE:

  biotk bacterial-gc-content <species-name>

DESCRIPTION:

  Get mean GC-content of a bacterial species. Average over all the item
  found in the dataset. This might be roughly correct but gives a basic
  idea.

EXAMPLES:

    $ biotk bacterial-gc-content Escherichia

OPTIONS:

  --help: Display this help message
  --full: Display full dataset filtered for <species-name>

AUTHOR:

  Samuel Barreto, (2017-05-29)

END_DOC

    exit 0
}

expr "$*" : ".*--help" > /dev/null && usage
if [ $# -eq 0 ]; then > /dev/null && usage; fi

readonly LOG_FILE="/tmp/$(basename "$0").log"
BLUE=$(tput setab 4; tput setaf 7)
RED=$(tput setaf 1)
ERROR=$(tput setab 9; tput setaf 7)
RESET=$(tput sgr 0)

info()    { echo -e "${BLUE}INFO:  $@${RESET}"  | tee -a "$LOG_FILE" >&2 ; }
warn()    { echo -e "${RED}WARN:  $@${RESET}"   | tee -a "$LOG_FILE" >&2 ; }
error()   { echo -e "${ERROR}ERROR: $@${RESET}" | tee -a "$LOG_FILE" >&2 ; }
fatal()   { echo -e "${ERROR}FATAL: $@${RESET}" | tee -a "$LOG_FILE" >&2 ; exit 1 ; }

cleanup() {
    rm -f "$LOG_FILE"
    unset BLUE RED ERROR RESET
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
    trap cleanup EXIT

    if  expr "$*" : ".*--full" > /dev/null; then
        sed -n '1p'  $BIO_SOURCE_DIR/data/prokaryotes.tsv | sed -e 's/^#//' | cut -f -13;
        awk -F'\t' "/${!#}/ {print}" "$BIO_SOURCE_DIR/data/prokaryotes.tsv" | cut -f -13

    else
        awk -F'\t' "/${!#}/{total += \$8; count++ } END { print total/count }" \
        $BIO_SOURCE_DIR/data/prokaryotes.tsv \
        2> "$LOG_FILE" || \
        error "Species not found. (Hint: Species name are usually case sensitive.)"
    fi
fi
